<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Glitch Café - Reviews</title>
  <style>
    body {
      background-color: #000;
      color: #0ff;
      font-family: 'Courier New', Courier, monospace;
      margin: 40px 20px;
      text-align: center;
      user-select: none;
    }
    h1 {
      font-size: 3rem;
      margin-bottom: 25px;
      text-shadow:
        2px 2px 5px #0ff,
        -2px -2px 5px #0ff;
      animation: flicker 3s infinite;
    }
    nav {
      margin-bottom: 30px;
    }
    nav a {
      color: #0ff;
      text-decoration: none;
      margin: 0 15px;
      font-size: 1.2rem;
      text-shadow: 1px 0 red, -1px 0 blue;
      transition: color 0.3s ease;
    }
    nav a:hover {
      color: #0cc;
    }
    #reviews-container {
      max-width: 700px;
      margin: 0 auto;
      background: rgba(0, 17, 17, 0.85);
      border: 2px solid #0ff;
      border-radius: 10px;
      padding: 25px 20px;
      box-shadow: 0 0 40px #0ff;
      text-align: left;
      min-height: 320px;
      user-select: text;
    }
    ul#review-list {
      list-style: none;
      padding: 0;
      margin: 0 0 30px 0;
    }
    ul#review-list li {
      font-size: 1.3rem;
      margin-bottom: 20px;
      color: #0ff;
      position: relative;
      user-select: text;
      cursor: default;
      text-shadow: 1px 0 red, -1px 0 blue;
      transition: none;
    }

    /* Flicker glitch effect on/off using keyframe */
    .glitch-flicker {
      position: relative;
      color: #0ff;
      user-select: text;
      animation: flickerGlitch 0.15s infinite;
    }
    .glitch-flicker::before,
    .glitch-flicker::after {
      content: attr(data-text);
      position: absolute;
      left: 0;
      width: 100%;
      overflow: hidden;
      color: #0ff;
      clip-path: polygon(0 0, 100% 0, 100% 45%, 0 45%);
    }
    .glitch-flicker::before {
      top: -2px;
      left: 2px;
      text-shadow: -2px 0 red;
      clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%);
      animation: flickerGlitchBefore 0.15s infinite;
    }
    .glitch-flicker::after {
      top: 2px;
      left: -2px;
      text-shadow: -2px 0 blue;
      clip-path: polygon(0 65%, 100% 65%, 100% 100%, 0 100%);
      animation: flickerGlitchAfter 0.15s infinite;
    }

    @keyframes flickerGlitch {
      0%, 50%, 100% { opacity: 1; transform: translate(0) skew(0); }
      25% { opacity: 0.3; transform: translate(-1px, 1px) skew(-2deg, 2deg); }
      75% { opacity: 0.5; transform: translate(1px, -1px) skew(2deg, -2deg); }
    }
    @keyframes flickerGlitchBefore {
      0%, 50%, 100% { clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%); transform: translate(0); }
      25% { clip-path: polygon(0 10%, 100% 10%, 100% 25%, 0 25%); transform: translate(-2px, 1px); }
      75% { clip-path: polygon(0 20%, 100% 20%, 100% 30%, 0 30%); transform: translate(2px, -1px); }
    }
    @keyframes flickerGlitchAfter {
      0%, 50%, 100% { clip-path: polygon(0 65%, 100% 65%, 100% 100%, 0 100%); transform: translate(0); }
      25% { clip-path: polygon(0 70%, 100% 70%, 100% 90%, 0 90%); transform: translate(2px, -1px); }
      75% { clip-path: polygon(0 80%, 100% 80%, 100% 95%, 0 95%); transform: translate(-2px, 1px); }
    }

    @keyframes flicker {
      0%, 19%, 21%, 23%, 25%, 54%, 56%, 100% {
        opacity: 1;
      }
      20%, 22%, 24%, 55% {
        opacity: 0.4;
      }
    }

    form {
      display: flex;
      flex-direction: column;
      max-width: 500px;
      margin: 0 auto;
      gap: 12px;
    }
    form input, form textarea {
      background-color: #001111;
      border: 1px solid #0ff;
      border-radius: 6px;
      color: #0ff;
      padding: 12px;
      font-family: monospace;
      font-size: 1rem;
      resize: vertical;
    }
    form button {
      background: #0ff;
      border: none;
      color: #000;
      font-weight: bold;
      padding: 12px 20px;
      border-radius: 8px;
      cursor: pointer;
      font-family: monospace;
      transition: background-color 0.3s ease;
    }
    form button:hover {
      background-color: #0cc;
    }
  </style>
</head>
<body>
  <h1>Glitch Café - Reviews</h1>

  <nav>
    <a href="index.html">Home</a>
    <a href="menu.html">Menu</a>
    <a href="reviews.html">Reviews</a>
    <a href="contact.html">Contact</a>
  </nav>

  <section id="reviews-container">
    <ul id="review-list">
      <!-- reviews will show here -->
    </ul>

    <form id="review-form">
      <input type="text" id="reviewer-name" placeholder="Your name" required maxlength="30" />
      <textarea id="review-text" placeholder="Write your review here..." rows="4" required maxlength="150"></textarea>
      <button type="submit">Submit Review</button>
    </form>
  </section>

  <script>
    const reviews = [
      "The Neon Mocha makes my circuits hum with joy.",
      "Plasma Latte caused a delightful short-circuit in my brain.",
      "BobaByte tastes like sweet data packets—10/10.",
      "Quantum Matcha warped my taste buds through time.",
      "Capsule Cappuccino glitched my mood into euphoria.",
      "Espress0 keeps me hacking all night long!",
      "Black Code is dark as my soul and twice as strong.",
      "NitroNode is like an energy injection straight to my veins.",
      "Chai L4tte feels like a warm digital hug.",
      "Tea.exe brewed perfection with every sip."
    ];

    const reviewList = document.getElementById('review-list');
    const reviewForm = document.getElementById('review-form');
    const reviewerName = document.getElementById('reviewer-name');
    const reviewText = document.getElementById('review-text');

    const showCount = 4;
    let currentReviews = [];

    // Shuffle array helper (Fisher-Yates)
    function shuffle(array) {
      let arr = array.slice();
      for(let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }

    function renderReviewsRandom() {
      const shuffled = shuffle(reviews);
      currentReviews = shuffled.slice(0, showCount);
      reviewList.innerHTML = '';
      currentReviews.forEach(text => {
        const li = document.createElement('li');
        li.textContent = text;
        li.setAttribute('data-text', text); // for glitch pseudo-elements
        reviewList.appendChild(li);
      });
    }

    renderReviewsRandom();

    // Change entire batch every 6 seconds
    setInterval(() => {
      renderReviewsRandom();
    }, 6000);

    // Flicker glitch effect bursts on random review
    let glitchInterval;
    let flickerTimeout;

    function flickerGlitchBurst() {
      const lis = reviewList.querySelectorAll('li');
      if(lis.length === 0) return;

      // Pick a random review to glitch flicker
      const randomIndex = Math.floor(Math.random() * lis.length);
      const chosen = lis[randomIndex];

      // Flicker on
      chosen.classList.add('glitch-flicker');

      // Flicker for ~1s in rapid pulses
      let flickerDuration = 1000;
      let flickerEnd = Date.now() + flickerDuration;

      function flickerPulse() {
        if(Date.now() > flickerEnd) {
          // Flicker off
          chosen.classList.remove('glitch-flicker');
          // Schedule next flicker after random pause 0.5s-2s
          flickerTimeout = setTimeout(flickerGlitchBurst, 500 + Math.random() * 1500);
          return;
        }
        // Toggle flicker on/off quickly (~150ms)
        chosen.classList.toggle('glitch-flicker');
        setTimeout(flickerPulse, 150);
      }
      flickerPulse();
    }

    // Start first flicker after random delay
    flickerTimeout = setTimeout(flickerGlitchBurst, 500 + Math.random() * 1500);

    reviewForm.addEventListener('submit', e => {
      e.preventDefault();
      const name = reviewerName.value.trim();
      const text = reviewText.value.trim();
      if(name && text) {
        const newReview = `${name} says: "${text}"`;
        reviews.push(newReview);
        renderReviewsRandom();
      }
    });
  </script>
</body>
</html>
